<?xml version="1.0" encoding="utf-8" ?>
<!--

About
====================
This XML document represents the rule definition of standard English grammar for
Wintermute. This document represents the means of converting linguistics into
ontological information in the English language. God be with us. There's a
document that will be posted to
<http://www.thesii.org/wiki/SII:Projects:Wintermute:LexicalBindings> soon. I
(Jacky Alcine) have to convert the document from ODT to MediaWiki (or if
someone's willing to; e-mail me at jacky.alcine@thesii.org and I'll send it to
you.)

Documentation
===================
1. Rule Elements

Rule elements are expected to only have the attribute 'type'. It should contain
ONE (1) type or part of a specific type of node that should match it. In the
future, rules will be allowed (and recommended) to be subset within each other
in order of similiarity (ie: The rule 'A' would contain 'Ad', and 'Ae'. 'Ae'
would contain 'Aen' and 'Aep'). This way, it'd make it possible to enable and
disable certain rules by type.

2. Bind Elements

Bind elements are perhaps the most cruical and dynamic elements of the RuleSet
document. They're required to have the 'with' attriubte, which specifys what
happens to the nodes before, during, or after linking.

2a. Pre-link Attributes
These attributes effect the linking process before it happens. Currently, there
aren't any attributes that fall in this category.

2b. Concurrent Link Attributes
These attribute effect the linking process while it happens.

+ linkAction: A list of actions to take place during the linking process. This
attribute can contain a list of values or just one for ease of use. Values
include:

    * reverse: This swaps the source node with the destination node and flips
    the locale and flags of the link. Used for ontological link simplicity.

    * othertype: This sets the flags of the link to the flags of the source
    node.

    * thistype: This sets the flags of the link to the flags of the destination
    node.

2c. Post-link Attributes
These attributes effect the post results of linking.

+ hide: [default = 'no'] Prevents this node (source node) from appearing on
the next round of parsing.

+ hideNext: [default = 'no'] Prevents the next node (destination node) from
appearing on its next round of parsing (2 rounds from now).

+ skipWord: [default = 'yes'] Doesn't allow the destination node to have a
chance at being parsed.

+ hideFilter: [default = ''] Hides a set of words from appearing on the next
round of parsing; a wrapper for the 'hide' attribute.

Changelog
==================
[#1] (15 Aug 2011 2:26 AM): Biggest issue right now, if there's a rule defined
for 'B' and there's a rule defined for 'Bz' and the node in question *is* 'Bz',
the 'B' rule will have precedence ONLY if it comes before 'Bz' in the document.
At the moment, you must put sub-rules (or rules targeted at specific types of
words) before the general definition.

[#2] (15 Aug 2011 9:51 PM): Fixed issue in changelog entry #1 in script by
using a rating system, but now adjectives don't link to anything after it. This
might be a human or logical error. (APPEND) Yes, it's a logical error, because
when I toggle the 'hide' attribute to 'no' (by deleting it), it generates an
extra, useless link and the whole syntax is messed up. *sigh*

[#3] (15 Aug 2011 11:37 PM): So, the issue in changelog entry #2 was a rule
mistake. Apparently, the generic 'A' rule took over and messed this up. -___-

[#4] (16 Aug 2011 12:18 AM): Incredible progress, the hideFilter attribute now
works to full efficiency. And it really rox!

[#5] (18 Aug 2011 5:37 AM): Was working from late Wednesday evening, will sleep
on this note; specific definitions have to be made for each pronoun; unless the
regex searching gets better.

[#6] (24 Aug 2011 2:03 AM): Spent time re-writing the plug-in system and then
re-writing the ENTIRE model setup from scratch. Soon this'll be
incorporated into the model system. I then implemented a global pseudo node
type (technically it was always there [Bz]). But now, I'm considering allowing
the rule file define a global psuedo type. I already put in the code for it,
but I have to implement the core of the model system for Rules before it can
become useful. I'll take this opporunity to work on the inheritance.

[#7] (24 Aug 2011 7:08 PM): Implemented the code to allow nested rules. Let's
see how this works out.

[#8] (25 Aug 2011 3:05 AM): The recursive rule code has been implemented. Also,
the matching system is stiffer and more exact, it looks for 100% matching and
works its way down, one at a time. I need to figure out to implement a means of
inheriting some binds.

[#9] (27 Aug 2011 5:41 PM) The parser's acting funny, the 'with' property
doesn't get set correctly. EDIT: No worries, it was my miscalibration. It seems
as if now the rule system became more specific. This means that'll take effort
(of course) to get these rules linking properly. Maybe it's time I build the
converter of LinkGrammar's rules for Wintermute. But it stated that it was
designed for newspaper-like text. We want Wintermute to understand sentence
fragments and conversation statements. That'll be in the future, I guess. Now
to the ontology?

[#10] (30 Aug 2011 3:33 AM): Woke up randomly (worried about her being in the ho
spital). But the declaration of Import elements allow a module-like system to lo
ad rules from different sources. Soon, when we learn the RDF syntax, we should
convert this document into something close to it.

-->
<RuleSet locale="en">
    <Import uri="verbs.xml" />
    <Import uri="adjec.xml" />
  <Rule type="A">
    <!-- pronouns -->
    <Rule type="x">
        <Bind with="Bcoapz" has="*" hideNext="yes" skipWord="no" typeHas="*" />
        <Bind with="Bcoapz" has="~" hideNext="yes" skipWord="no" typeHas="~" />
    </Rule>
    <Rule type="r">
      <Rule with="e">
        <Bind with="E" skipWord="no" />
      </Rule>
      <Rule type="b">
        <Bind with="Ap" has="123*~" skipWord="no" />
        <Bind with="Bcoaz" has="*~" hideNext="yes" skipWord="no" />
      </Rule>
      <Rule type="c">
        <Bind with="Craf" has="123*~" skipWord="no" />
      </Rule>
    </Rule>
    <Rule type="e,d">
      <Rule type="n,o,p">
        <Rule type="*">
            <Bind with="Craf" has="1*" linkAction="reverse" typeHas="1*" />
            <Bind with="Craf" has="2*" linkAction="reverse" typeHas="2*" />
            <Bind with="Craf" has="3*" linkAction="reverse" typeHas="3*" />
        </Rule>
        <Rule type="~">
            <Bind with="Craf" has="1~" linkAction="reverse" typeHas="1~" />
            <Bind with="Craf" has="2~" linkAction="reverse" typeHas="2~" />
            <Bind with="Craf" has="3~" linkAction="reverse" typeHas="3~" />
        </Rule>
      </Rule>
    </Rule>
    <Rule type="p">
      <Rule type="x">
      </Rule>
    </Rule>
  </Rule>

  <Rule type="B">
    <!-- nouns -->
    <Bind with="Bpz*~,E,Fm+" skipWord="no" hideNext="yes" />
    <Rule type="coa*~">
        <Bind with="Craf" hasAll="3~" linkAction="reverse" typeHas="~" />
        <Bind with="Craf" hasAll="3*" skipWord="no" linkAction="reverse" typeHas="*" />
    </Rule>
    <Rule type="p*~">
        <Bind with="Craf" hasAll="23~" linkAction="reverse" typeHas="p~" />
        <Bind with="Craf" hasAll="23*" skipWord="no" linkAction="reverse" typeHas="p*" />
    </Rule>
    <Rule type="z">
      <Bind with="Craf" has="123*~" skipWord="no" linkAction="reverse" typeHas="z*~" />
      <Bind with="Bcoa" has="*~" hideNext="yes" skipWord="no" />
      <Bind with="Aednopx" has="*~" />
      <Bind with="E" />
      <Bind with="Fm+-" skipWord="no"/>
    </Rule>
  </Rule>

  <Rule type="C">
   <Rule type="raf">
      <Bind with="Bz*~" typeHas="*~" />
      <Rule type="*">
         <Bind with="Bz"    hasAll="*"  typeHas="*" />
         <Bind with="Bpcoa" hasAll="3*" typeHas="3*" />
         <Bind with="Ax"    hasAll="*"  typeHas="*" />
         <Bind with="Aeon"  hasAll="1*" typeHas="1*" />
         <Bind with="Aeon"  hasAll="2*" typeHas="2*" />
         <Bind with="Aeon"  hasAll="3*" typeHas="3*" />
      </Rule>
      <Rule type="~">
         <Bind with="Bz"    hasAll="~"  typeHas="~" />
         <Bind with="Bpcoa" hasAll="3~" typeHas="3~" />
         <Bind with="Ax"    hasAll="~"  typeHas="~" />
         <Bind with="Aeon"  hasAll="1~" typeHas="1~" />
         <Bind with="Aeon"  hasAll="2~" typeHas="2~" />
         <Bind with="Aeon"  hasAll="3~" typeHas="3~" />
      </Rule>
   </Rule>
 </Rule>

  <Rule type="D">
    <Bind with="C" />
  </Rule>

  <Rule type="E">
    <Rule with="A,Bcoazp*~" skipWord="no" hideNext="yes" linkAction="reverse,thisType" />
    <Rule with="E" />
  </Rule>

  <Rule type="F">
    <Rule with="Aednopx*~,Bcoazp*~" linkAction="reverse,thisType" skipWord="no" hideNext="yes" />
    <Rule with="F+" typeHas="-" />
    <Rule with="F-" typeHas="+" />
  </Rule>
</RuleSet>
