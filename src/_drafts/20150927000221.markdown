---
layout: post
title: "Diving Deeper with Testing Hapi: Authentication"
image: none
category: tutorials
tags:
  - hapi
  - testing
  - routing

---

> This post is a follow up to a previous post about [testing routes with
> Hapi][1]. Check that post out for more information on getting started with
> testing general route activity.

I'm _still_ working on a personal project that makes uses of [Hapi][] for its
API layer. As mentioned in a [previous post][1], handling route testing with
Hapi is best done using the [`server.inject`][2] method. This method is _really_
useful for doing this like mocking out authentication and just hammering in the
different kinds of bits of input that you'd have for that route[^1].

This post makes a _few assumptions_ about how you've structured your Hapi
application:

  1. **Everything is a plugin.** I haven't found an authoritative source on 'best
     practices' for Hapi at the moment, but I do use [Glue][] to build up this
     project's server and handle that crafting. This modular plugin approach
     made it a lot easier for me to test independent bits of logic like ensuring
     configuration is loaded appropriately for each environment or if all of the
     expected models are available.

## Defining Your Authentication Plugin

Before we even write the test for testing if authentication works for you, we'll
define a plugin that you can use to make it easy to sprinkle (or dump)
authentication around your site. Here's a very bare bones approach to
implementing a plugin that'd handle authentication.

{% highlight javascript linenos %}
'use strict'

let plugin = {}

plugin.register = function (server, options, next) {
  const scheme = (server, options) => {
    return {
      authenticate: (request, reply) => {
        return reply({
          credentials: {} 
        })
      },
      payload: (request, reply) => {
        return reply.continue()
      },
      response: (request, reply) => {
        return reply.continue()
      }
    }
  }

  server.auth.scheme('custom', dbScheme)
  cb()
}

plugin.register.attributes = {
  name: 'my-auth',
  version: '0.0.1',
  dependencies: [],
  multiple: false
}

exports = plugin
{% endhighlight %}

> If you're confused about the attributes property or even just setting up
> plugins in Hapi, [check out the guide][2]!

[^1]: There _is_ a package that handles this in an automated fashion named **[patronus][]**.
[1]: {% post_url 2015-09-08-testing-routes-with-hapi %}
[2]: http://hapijs.com/tutorials/plugins
[hapi]: https://hapijs.com
[server.inject]: http://hapijs.com/api#serverinjectoptions-callback
[patronus]: https://github.com/appersonlabs/patronus
[glue]: https://github.com/hapijs/glue
